import heapq

class BinaryHeap:
    def __init__(self, initial_data=None):
        self.heap = []
        if initial_data is not None:
            for item in initial_data:
                self.insert(item)
    
    def insert(self, key):
        heapq.heappush(self.heap, key)
    
    def extract_min(self):
        if not self.heap:
            return None
        return heapq.heappop(self.heap)
    
    def peek_min(self):
        if not self.heap:
            return None
        return self.heap[0]
    
    def is_empty(self):
        return len(self.heap) == 0
    
    def size(self):
        return len(self.heap)
    
    def __len__(self):
        return len(self.heap)
    
    def __bool__(self):
        return len(self.heap) > 0


    class HashTable:
        def __init__(self, size=10):
            self.size = size
            self.table = [None] * size

        def __setitem__(self, key, value):
            index = hash(key) % self.size
            if self.table[index] is None:
                self.table[index] = [(key, value)]
            else:
                self.table[index].append((key, value))

        def __getitem__(self, key):
            index = hash(key) % self.size
            if self.table[index] is not None:
                for k, v in self.table[index]:
                    if k == key:
                        return v
            return None
